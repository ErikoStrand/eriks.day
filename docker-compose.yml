services:
  app: # Your SvelteKit application service
    build:
      context: .
      dockerfile: Dockerfile
    image: 'eriks.day-app' # Changed image name slightly to avoid conflict if you name nginx 'eriks.day'
    container_name: 'eriks.day'
    environment:
      - HOST=0.0.0.0 # SvelteKit app listens on all interfaces inside the container
      - PORT=3000 # SvelteKit app listens on port 3000 internally (HTTP)
    restart: unless-stopped
    # No 'ports' needed here as Nginx will handle external exposure

  nginx: # New Nginx reverse proxy service
    image: nginx:alpine
    container_name: 'eriks.day-nginx-proxy'
    restart: unless-stopped
    ports:
      - '8080:8080' # Expose Nginx HTTPS port 8080 to the host
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - /opt/certs/eriks.day/eriks.day.pem:/etc/ssl/certs/eriks.day.pem:ro
      - /opt/certs/eriks.day/eriks.day.key:/etc/ssl/private/eriks.day.key:ro
      - nginx_logs:/var/log/nginx # Optional: volume for Nginx logs
    depends_on:
      - app # Nginx will start after the app service (though it might try to connect before app is ready)

volumes:
  nginx_logs: # Optional: define the named volume for Nginx logs

# Your SvelteKit app's Dockerfile should ensure it's using an adapter
# like @sveltejs/adapter-node and running `node build` or similar
# to start the Node.js server listening on $HOST:$PORT (which is 0.0.0.0:3000)
